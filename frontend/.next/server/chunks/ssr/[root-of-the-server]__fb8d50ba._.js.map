{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CarlosGarcia/Genesis/frontend/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CarlosGarcia/Genesis/frontend/src/ai/flows/log-analyzer-flow.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview An AI flow for analyzing log data.\r\n *\r\n * - analyzeLogs - A function that takes a log string and returns a summary.\r\n * - LogAnalysisInput - The input type for the analyzeLogs function.\r\n * - LogAnalysisOutput - The return type for the analyzeLogs function.\r\n */\r\n\r\nimport { ai } from '@/ai/genkit';\r\nimport { z } from 'zod';\r\n\r\nconst LogAnalysisInputSchema = z.object({\r\n  logs: z.string().describe('The full string content of the logs to be analyzed.'),\r\n});\r\nexport type LogAnalysisInput = z.infer<typeof LogAnalysisInputSchema>;\r\n\r\nconst LogAnalysisOutputSchema = z.object({\r\n  summary: z.string().describe('A brief, one-paragraph summary of the key events in the logs.'),\r\n  errorCount: z.number().describe('The total count of ERROR level log entries.'),\r\n  warningCount: z.number().describe('The total count of WARNING level log entries.'),\r\n  criticalError: z.string().optional().describe('A detailed description of the most critical error found, if any.'),\r\n  recommendation: z.string().optional().describe('A recommended action to resolve the primary issue, if applicable.'),\r\n});\r\nexport type LogAnalysisOutput = z.infer<typeof LogAnalysisOutputSchema>;\r\n\r\n\r\nconst logAnalysisPrompt = ai.definePrompt({\r\n  name: 'logAnalysisPrompt',\r\n  input: { schema: LogAnalysisInputSchema },\r\n  output: { schema: LogAnalysisOutputSchema },\r\n  prompt: `You are a helpful DevOps assistant. Your task is to analyze the provided logs and provide a structured summary.\r\n\r\nCarefully review the logs provided below. Identify all errors and warnings. Determine the root cause of any failures.\r\n\r\nLogs:\r\n\\`\\`\\`\r\n{{{logs}}}\r\n\\`\\`\\`\r\n\r\nBased on your analysis, provide a concise summary, count the errors and warnings, identify the most critical error, and suggest a resolution. If there are no errors, you can omit the criticalError and recommendation fields.`,\r\n});\r\n\r\nconst logAnalysisFlow = ai.defineFlow(\r\n  {\r\n    name: 'logAnalysisFlow',\r\n    inputSchema: LogAnalysisInputSchema,\r\n    outputSchema: LogAnalysisOutputSchema,\r\n  },\r\n  async (input) => {\r\n    const { output } = await logAnalysisPrompt(input);\r\n    if (!output) {\r\n      throw new Error('Failed to get a response from the AI model.');\r\n    }\r\n    return output;\r\n  }\r\n);\r\n\r\nexport async function analyzeLogs(input: LogAnalysisInput): Promise<LogAnalysisOutput> {\r\n  return logAnalysisFlow(input);\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;;;;;;AAEA,MAAM,yBAAyB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAIA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACxC,MAAM;IACN,OAAO;QAAE,QAAQ;IAAuB;IACxC,QAAQ;QAAE,QAAQ;IAAwB;IAC1C,QAAQ,CAAC;;;;;;;;;+NASoN,CAAC;AAChO;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,kBAAkB;IAC3C,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAGK,eAAe,YAAY,KAAuB;IACvD,OAAO,gBAAgB;AACzB;;;IAFsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CarlosGarcia/Genesis/frontend/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeLogs as '40005c34b31524315249ee3d44ecfed49966a8e96d'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CarlosGarcia/Genesis/frontend/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CarlosGarcia/Genesis/frontend/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}